import json
from typing import Dict, List, Optional
from telegram import Update, constants, BotCommand, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv
import os
from enum import Enum

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
TOKEN = os.getenv("BOT_TOKEN")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
class MessageText:
    START = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫-–ª–∏—Å—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n"
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/template - –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ —á–µ–∫-–ª–∏—Å—Ç\n"
        "/types - –≤–∏–¥—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n"
        "/help - —è –∑–∞–ø—É—Ç–∞–ª—Å—è\n\n"
        "üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã –¥–ª—è —á–µ–∫-–ª–∏—Å—Ç–æ–≤:\n"
        "{available_topics}\n\n"
        "üìù –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' –∏–ª–∏ '–Ω–∞–≤–∏–≥–∞—Ü–∏—è'), "
        "–∏ —è –ø—Ä–∏—à–ª—é –≤–∞–º –ø–æ–¥—Ä–æ–±–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º."
    )
    
    HELP = (
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
        "1. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "   - '–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'\n"
        "   - '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'\n"
        "   - '–Ω–∞–≤–∏–≥–∞—Ü–∏—è'\n\n"
        "2. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "   - /start - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "   - /template - –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ —á–µ–∫-–ª–∏—Å—Ç\n"
        "   - /types - –≤–∏–¥—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n"
        "   - /help - —è –∑–∞–ø—É—Ç–∞–ª—Å—è\n\n"
        "3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º."
    )
    
    TEMPLATE_HEADER = "üìã –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
    TEMPLATE_FOOTER = "\n\n–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω –∫–∞–∫ –æ—Å–Ω–æ–≤—É –¥–ª—è —Å–≤–æ–µ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
    
    TESTING_TYPES_HEADER = "üß™ –í–∏–¥—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è:\n\n"
    
    UNKNOWN_COMMAND = "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    TOPIC_NOT_FOUND = "–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã: {available_topics}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–¥–Ω—É –∏–∑ —ç—Ç–∏—Ö –∫–æ–º–∞–Ω–¥ –∏–ª–∏ —Ç–µ–º, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
    ERROR_MESSAGE = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

class ButtonText(Enum):
    CHECKLIST_REMINDER = "–ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ —á–µ–∫-–ª–∏—Å—Ç"
    TESTING_TYPES = "–í–∏–¥—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    HELP = "–Ø –∑–∞–ø—É—Ç–∞–ª—Å—è"

class BotCommands(Enum):
    START = ("start", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
    TEMPLATE = ("template", "–ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ —á–µ–∫-–ª–∏—Å—Ç")
    TYPES = ("types", "–í–∏–¥—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    HELP = ("help", "–Ø –∑–∞–ø—É—Ç–∞–ª—Å—è")

class KnowledgeBaseLoader:
    """–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∑–∞–≥—Ä—É–∑–∫—É –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π (Single Responsibility Principle)"""
    @staticmethod
    def load(file_path: str = 'checklists.json') -> Dict:
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            print("–§–∞–π–ª checklists.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return {}
        except json.JSONDecodeError:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON-—Ñ–∞–π–ª–∞!")
            return {}

class ChecklistGenerator:
    """–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ–∫-–ª–∏—Å—Ç–æ–≤ (Single Responsibility Principle)"""
    @staticmethod
    def generate(topic: str, knowledge_base: Dict) -> str:
        topic_data = knowledge_base[topic]
        checklist = [f"üìå –ß–µ–∫-–ª–∏—Å—Ç –¥–ª—è —Ç–µ–º—ã: {topic.capitalize()}"]
        
        for category in topic_data["categories"]:
            checklist.append(f"\nüîπ {category}:")
            checklist.extend([f"‚Ä¢ {item}" for item in topic_data["items"][category]])
            
        return "\n".join(checklist)

class MessageSender:
    """–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π (Single Responsibility Principle)"""
    @staticmethod
    async def send_long_message(update: Update, text: str, reply_markup=None):
        lines = text.split('\n')
        current_chunk = []
        current_length = 0
        
        for line in lines:
            line_length = len(line) + 1
            
            if current_length + line_length > constants.MessageLimit.MAX_TEXT_LENGTH:
                await update.message.reply_text('\n'.join(current_chunk), reply_markup=reply_markup)
                current_chunk = [line]
                current_length = line_length
                reply_markup = None
            else:
                current_chunk.append(line)
                current_length += line_length
        
        if current_chunk:
            await update.message.reply_text('\n'.join(current_chunk), reply_markup=reply_markup)

class AdvancedChecklistBot:
    def __init__(self):
        self.knowledge_base = KnowledgeBaseLoader.load()
        self._initialize_data()
        
    def _initialize_data(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞"""
        self.default_template = DEFAULT_TEMPLATE
        self.available_topics_list = AVAILABLE_TOPICS
        self.testing_types = TESTING_TYPES
        
    async def setup_commands(self, application: Application):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é –±–æ—Ç–∞"""
        commands = [BotCommand(command.value[0], command.value[1]) for command in BotCommands]
        await application.bot.set_my_commands(commands)
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        keyboard = [
            [KeyboardButton(ButtonText.CHECKLIST_REMINDER.value), 
             KeyboardButton(ButtonText.TESTING_TYPES.value)],
            [KeyboardButton(ButtonText.HELP.value)]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        available_topics = "\n".join([f"‚Ä¢ {topic.capitalize()}" for topic in self.available_topics_list])
        welcome_text = MessageText.START.format(available_topics=available_topics)
        
        await MessageSender.send_long_message(update, welcome_text, reply_markup)
        
    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        await update.message.reply_text(MessageText.HELP)
        
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text.lower()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
        if text == ButtonText.CHECKLIST_REMINDER.value.lower():
            await self.send_template(update, context)
        elif text == ButtonText.TESTING_TYPES.value.lower():
            await self.send_testing_types(update, context)
        elif text == ButtonText.HELP.value.lower():
            await self.help(update, context)
        elif text in self.knowledge_base:
            checklist = ChecklistGenerator.generate(text, self.knowledge_base)
            await MessageSender.send_long_message(update, checklist)
        elif text.startswith('/'):
            await update.message.reply_text(MessageText.UNKNOWN_COMMAND)
        else:
            available_topics = ", ".join([f"'{topic}'" for topic in self.available_topics_list])
            await update.message.reply_text(
                MessageText.TOPIC_NOT_FOUND.format(available_topics=available_topics)
            )
            
    async def send_template(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
        template = MessageText.TEMPLATE_HEADER + "\n".join([f"‚Ä¢ {item}" for item in self.default_template]) + MessageText.TEMPLATE_FOOTER
        await MessageSender.send_long_message(update, template)
        
    async def send_testing_types(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        types_text = MessageText.TESTING_TYPES_HEADER + "\n".join(self.testing_types)
        await MessageSender.send_long_message(update, types_text)
    
    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")
        if update and hasattr(update, 'message'):
            await update.message.reply_text(MessageText.ERROR_MESSAGE)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–∞–Ω–Ω—ã—Ö
DEFAULT_TEMPLATE = [
    "UI/–í–Ω–µ—à–Ω–∏–π –≤–∏–¥ ‚Äì –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–∞–∫–µ—Ç–∞–º",
    "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å ‚Äì –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º",
    "–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö ‚Äì –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö",
    "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ‚Äì –†–µ–∞–∫—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –Ω–∞ –Ω–µ—à—Ç–∞—Ç–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏",
    "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ‚Äì –°–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã, –æ—Ç–∫–ª–∏–∫ —Å–∏—Å—Ç–µ–º—ã",
    "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å ‚Äì –ó–∞—â–∏—Ç–∞ –æ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π, –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ",
    "–ö—Ä–æ—Å—Å-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ—Å—Ç—å ‚Äì –†–∞–±–æ—Ç–∞ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö, –û–°, –±—Ä–∞—É–∑–µ—Ä–∞—Ö",
    "–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äì –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
    "–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è ‚Äì –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —è–∑—ã–∫–æ–≤, —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫",
    "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è ‚Äì –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–º—É –ø–æ–≤–µ–¥–µ–Ω–∏—é",
    "–Æ–∑–∞–±–∏–ª–∏—Ç–∏ ‚Äì –£–¥–æ–±—Å—Ç–≤–æ –∏ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
    "–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å ‚Äì –†–∞–±–æ—Ç–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏ –ü–û, –∂–µ–ª–µ–∑–∞, –±—Ä–∞—É–∑–µ—Ä–æ–≤",
    "–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å (a11y) ‚Äì –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ª—é–¥–µ–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏",
    "API-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äì –ü—Ä–æ–≤–µ—Ä–∫–∞ endpoints, –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤",
    "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äì –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏",
    "–ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äì –ü–æ–≤–µ–¥–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π",
    "–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å ‚Äì –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞ –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
    "–û—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å ‚Äì –†–∞–±–æ—Ç–∞ –ø—Ä–∏ —Å–±–æ—è—Ö (—Å–µ—Ç—å, —Å–µ—Ä–≤–µ—Ä—ã)",
    "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ ‚Äì –û—Ç–∫–∞—Ç –ø–æ—Å–ª–µ —Å–±–æ–µ–≤, backup-—ã",
    "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º–æ—Å—Ç—å ‚Äì –†–∞–±–æ—Ç–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è–º–∏",
    "–ú–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö ‚Äì –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –≤–µ—Ä—Å–∏—è–º–∏",
    "–£—Å—Ç–∞–Ω–æ–≤–∫–∞/–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ‚Äì –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–Ω—Å—Ç–∞–ª–ª—è—Ü–∏–∏ –∏ –∞–ø–¥–µ–π—Ç–æ–≤",
    "–ú—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ—Å—Ç—å ‚Äì –ò–∑–æ–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ (SaaS)",
    "–Æ–Ω–∏—Ç-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äì –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –∫–æ–¥–∞",
    "–†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äì –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π",
    "A/B-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äì –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π —Ñ–∏—á",
    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ ‚Äì –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫",
    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ‚Äì –†–∞–±–æ—Ç–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º–∏",
    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–π ‚Äì –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, –ø–æ–¥–ø–∏—Å–æ–∫",
    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ç—è—Ö ‚Äì –†–∞–±–æ—Ç–∞ –ø—Ä–∏ –º–µ–¥–ª–µ–Ω–Ω–æ–º/–Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏"
]

AVAILABLE_TOPICS = [
    "–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
    "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
    "–Ω–∞–≤–∏–≥–∞—Ü–∏—è",
    "—Ñ–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏",
    "–ø–æ–∏—Å–∫",
    "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
    "api"
]

TESTING_TYPES = [
    "1. –ü–æ —Ç–∏–ø—É –ø—Ä–æ–≤–µ—Ä–∫–∏",
    "‚Ä¢ –ü–æ–∑–∏—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äì –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö (–≤–∞–ª–∏–¥–Ω—ã—Ö) –¥–∞–Ω–Ω—ã—Ö.",
    "‚Ä¢ –ù–µ–≥–∞—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äì –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.",
    "",
    "2. –ü–æ —á–∞—Å—Ç–æ—Ç–µ –∏ –≥–ª—É–±–∏–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
    "‚Ä¢ –†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äì –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø—Ä–æ–≥–æ–Ω —Ç–µ—Å—Ç–æ–≤ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —Ä–µ–≥—Ä–µ—Å—Å–∏–π.",
    "‚Ä¢ –°–∞–Ω–∏—Ç–∞—Ä–Ω–æ–µ (Sanity) ‚Äì –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π.",
    "‚Ä¢ –î—ã–º–æ–≤–æ–µ (Smoke) ‚Äì –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.",
    "",
    "3. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
    "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å–∏—Å—Ç–µ–º—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º (—á—Ç–æ –¥–µ–ª–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞).",
    "",
    "4. –ù–µ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
    "‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å ‚Äì –ø–æ–∏—Å–∫ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –∏ –∑–∞—â–∏—Ç–∞ –æ—Ç –≤–∑–ª–æ–º–∞.",
    "‚Ä¢ –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ ‚Äì –æ—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π.",
    "‚Ä¢ –°—Ç—Ä–µ—Å—Å–æ–≤–æ–µ ‚Äì —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π (–Ω–∞–≥—Ä—É–∑–∫–∞, —Ä–µ—Å—É—Ä—Å—ã).",
    "‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—Ä—Å—Ç–∫–∏ (UI/UX) ‚Äì –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–∏–∑–∞–π–Ω—É –∏ —É–¥–æ–±—Å—Ç–≤–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.",
    "‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π ‚Äì –∞–Ω–∞–ª–∏–∑ –ø–æ–ª–Ω–æ—Ç—ã –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏ –¢–ó.",
    "",
    "5. –ü–æ —É—Ä–æ–≤–Ω—é –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–¥—É",
    "‚Ä¢ –ë–µ–ª—ã–π —è—â–∏–∫ (White Box) ‚Äì —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –∫–æ–¥—É –∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º.",
    "‚Ä¢ –ß–µ—Ä–Ω—ã–π —è—â–∏–∫ (Black Box) ‚Äì —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –∑–Ω–∞–Ω–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (—Ç–æ–ª—å–∫–æ –≤—Ö–æ–¥/–≤—ã—Ö–æ–¥).",
    "‚Ä¢ –°–µ—Ä—ã–π —è—â–∏–∫ (Gray Box) ‚Äì —á–∞—Å—Ç–∏—á–Ω–æ–µ –∑–Ω–∞–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ª–æ–≥–∏–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API).",
    "",
    "6. –ü–æ —É—Ä–æ–≤–Ω—è–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
    "‚Ä¢ –ú–æ–¥—É–ª—å–Ω–æ–µ (Unit) ‚Äì —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏–ª–∏ –∫–ª–∞—Å—Å–æ–≤.",
    "‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ ‚Äì –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏ –∏–ª–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏.",
    "‚Ä¢ –°–∏—Å—Ç–µ–º–Ω–æ–µ ‚Äì —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤ —Ü–µ–ª–æ–º –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.",
    "‚Ä¢ –ü—Ä–∏–µ–º–æ—á–Ω–æ–µ (UAT) ‚Äì —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑—á–∏–∫–æ–º –ø–µ—Ä–µ–¥ —Å–¥–∞—á–µ–π –ø—Ä–æ–µ–∫—Ç–∞.",
    "",
    "7. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∏–¥—ã",
    "‚Ä¢ –°–∫–≤–æ–∑–Ω–æ–µ (E2E) ‚Äì —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–æ –∫–æ–Ω—Ü–∞.",
    "‚Ä¢ –ö–æ–Ω—Ç—Ä–∞–∫—Ç–Ω–æ–µ ‚Äì –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—à–µ–Ω–∏–π –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, API-–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã).",
    "‚Ä¢ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω–æ–µ ‚Äì —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (–º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤, –±–∏–±–ª–∏–æ—Ç–µ–∫).",
    "",
    "8. –ü–æ –ø—Ä–æ–¥—É–∫—Ç—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
    "‚Ä¢ Web ‚Äì —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π (–±—Ä–∞—É–∑–µ—Ä—ã, –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã).",
    "‚Ä¢ API ‚Äì –ø—Ä–æ–≤–µ—Ä–∫–∞ backend-–ª–æ–≥–∏–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—Ä–æ—Å—ã (REST, GraphQL, SOAP).",
    "‚Ä¢ Mobile ‚Äì —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π (iOS, Android).",
    "",
    "9. –ü–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏",
    "‚Ä¢ –†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äì –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –≤—Ä—É—á–Ω—É—é (–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ, UI-—Ç–µ—Å—Ç—ã).",
    "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏–Ω–æ–µ ‚Äì –ø—Ä–æ–≥–æ–Ω —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é —Å–∫—Ä–∏–ø—Ç–æ–≤ (unit, API, e2e).",
    "",
    "10. –ü–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ç–µ—Å—Ç–æ–≤",
    "‚Ä¢ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ (Ad-hoc) ‚Äì —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤.",
    "‚Ä¢ –ò–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ–µ (Error guessing) ‚Äì –ø–æ–∏—Å–∫ –æ—à–∏–±–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—ã—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞.",
    "‚Ä¢ –ü–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ ‚Äì —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π (—Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π, –¢–ó)."
]

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    bot = AdvancedChecklistBot()
    app = Application.builder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler(BotCommands.START.value[0], bot.start))
    app.add_handler(CommandHandler(BotCommands.TEMPLATE.value[0], bot.send_template))
    app.add_handler(CommandHandler(BotCommands.TYPES.value[0], bot.send_testing_types))
    app.add_handler(CommandHandler(BotCommands.HELP.value[0], bot.help))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
    app.post_init = bot.setup_commands
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
    app.add_error_handler(bot.error_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()